diff --git a/.gitignore b/.gitignore
index 97ba6b79834c..11638144013d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -132,3 +132,6 @@ all.config
 
 # Kdevelop4
 *.kdev4
+
+#compiled output
+modules/lib/modules/
\ No newline at end of file
diff --git a/arch/arm/boot/2L-125_stereo-88k-24b_04.flac b/arch/arm/boot/2L-125_stereo-88k-24b_04.flac
new file mode 100644
index 000000000000..653b65da87d5
Binary files /dev/null and b/arch/arm/boot/2L-125_stereo-88k-24b_04.flac differ
diff --git a/arch/arm/boot/dts/imx7d-colibri-eval-v3.dts b/arch/arm/boot/dts/imx7d-colibri-eval-v3.dts
index 136e11ab4893..b601cd63a979 100644
--- a/arch/arm/boot/dts/imx7d-colibri-eval-v3.dts
+++ b/arch/arm/boot/dts/imx7d-colibri-eval-v3.dts
@@ -1,5 +1,6 @@
 /*
  * Copyright 2016 Toradex AG
+ * Copyright 2019 Welsh Technologies, Inc
  *
  * This file is dual-licensed: you can use it either under the terms
  * of the GPL or the X11 license, at your option. Note that this dual
@@ -48,9 +49,93 @@
 	model = "Toradex Colibri iMX7D on Colibri Evaluation Board V3";
 	compatible = "toradex,colibri-imx7d-eval-v3", "toradex,colibri-imx7d",
 		     "fsl,imx7d";
+
+	sound_mp {
+		compatible = "simple-audio-card";
+		simple-audio-card,name = "Musica Pristina Digital Output";
+		simple-audio-card,format = "i2s";
+		simple-audio-card,bitclock-master = <&mp_master>;
+		simple-audio-card,frame-master = <&mp_master>;
+		simple-audio-card,cpu {
+			sound-dai = <&sai2>;
+		};
+
+		mp_master: simple-audio-card,codec {
+			sound-dai = <&codec_mp>;
+		};
+	};
+};
+
+/* Kill default sound card. */
+//&codec: sgtl5000@0a {
+&codec {
+	status = "disabled";
 };
 
 &usbotg2 {
 	vbus-supply = <&reg_usbh_vbus>;
 	status = "okay";
 };
+
+&i2c4 {
+	status = "okay";
+	codec_mp: mp_clkgen@75 {
+		compatible = "mp,mp-clkgen";
+		#sound-dai-cells = <0>;
+		reg = <0x75>;
+	};
+	codec_oscsel: mp_oscsel@41 {
+		compatible = "mp,codec-oscsel";
+		mp,clkgen = <&codec_mp>;
+		reg = <0x41>;
+	};
+	codec_lcd: mp_lcd@76 {
+		compatible = "mp,codec-lcd";
+		mp,clkgen = <&codec_mp>;
+		reg = <0x76>;
+	};
+};
+
+&sai2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai2>;
+	status = "okay";
+};
+
+
+
+/* Disable uart1 since its pins overlap with sai2 pins. */
+// &uart1 {
+// 	status = "disabled";
+// };
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	assigned-clocks = <&clks IMX7D_UART1_ROOT_SRC>;
+	assigned-clock-parents = <&clks IMX7D_OSC_24M_CLK>;
+	// uart-has-rtscts; KILL THIS PROPERTY since we are stealing the pins for I2S
+	fsl,dte-mode;
+};
+
+/* Disable uart2 since its pins overlap with sai2 pins. */
+&uart2 {
+	status = "disabled";
+};
+
+&iomuxc {
+	pinctrl_sai2: sai2-grp {
+		fsl,pins = <
+			MX7D_PAD_SAI2_TX_BCLK__SAI2_TX_BCLK		0x1f
+			MX7D_PAD_SAI2_TX_SYNC__SAI2_TX_SYNC		0x1f
+			MX7D_PAD_SAI2_TX_DATA__SAI2_TX_DATA0	0
+		>;
+	};
+
+	pinctrl_uart1: uart1-grp {
+		fsl,pins = <
+			MX7D_PAD_UART1_TX_DATA__UART1_DTE_RX	0x79
+			MX7D_PAD_UART1_RX_DATA__UART1_DTE_TX	0x79
+		>;
+	};
+};
\ No newline at end of file
diff --git a/arch/arm/boot/dts/imx7d-colibri-mp.dts b/arch/arm/boot/dts/imx7d-colibri-mp.dts
new file mode 100644
index 000000000000..933b3824d671
--- /dev/null
+++ b/arch/arm/boot/dts/imx7d-colibri-mp.dts
@@ -0,0 +1,146 @@
+/*
+ * Copyright 2016 Toradex AG
+ * Copyright 2019 Welsh Technologies, Inc
+ *
+ * This file is dual-licensed: you can use it either under the terms
+ * of the GPL or the X11 license, at your option. Note that this dual
+ * licensing only applies to this file, and not this project as a
+ * whole.
+ *
+ *  a) This file is free software; you can redistribute it and/or
+ *     modify it under the terms of the GNU General Public License as
+ *     published by the Free Software Foundation; either version 2 of the
+ *     License, or (at your option) any later version.
+ *
+ *     This file is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ * Or, alternatively,
+ *
+ *  b) Permission is hereby granted, free of charge, to any person
+ *     obtaining a copy of this software and associated documentation
+ *     files (the "Software"), to deal in the Software without
+ *     restriction, including without limitation the rights to use,
+ *     copy, modify, merge, publish, distribute, sublicense, and/or
+ *     sell copies of the Software, and to permit persons to whom the
+ *     Software is furnished to do so, subject to the following
+ *     conditions:
+ *
+ *     The above copyright notice and this permission notice shall be
+ *     included in all copies or substantial portions of the Software.
+ *
+ *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+ *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ *     OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+/dts-v1/;
+#include "imx7d-colibri.dtsi"
+#include "imx7-colibri-eval-v3.dtsi"
+
+/ {
+	model = "Toradex Colibri iMX7D on Colibri Evaluation Board V3";
+	compatible = "toradex,colibri-imx7d-eval-v3", "toradex,colibri-imx7d",
+		     "fsl,imx7d";
+
+	sound_mp {
+		compatible = "simple-audio-card";
+		simple-audio-card,name = "Musica Pristina Digital Output";
+		simple-audio-card,format = "i2s";
+		simple-audio-card,bitclock-master = <&mp_master>;
+		simple-audio-card,frame-master = <&mp_master>;
+		simple-audio-card,cpu {
+			sound-dai = <&sai2>;
+		};
+
+		mp_master: simple-audio-card,codec {
+			sound-dai = <&codec_mp>;
+		};
+	};
+};
+
+/* Kill default sound card. */
+//&codec: sgtl5000@0a {
+&codec {
+	status = "disabled";
+};
+
+&usbotg2 {
+	vbus-supply = <&reg_usbh_vbus>;
+	status = "okay";
+};
+
+&i2c4 {
+	status = "okay";
+	codec_mp: mp_clkgen@75 {
+		compatible = "mp,mp-clkgen";
+		#sound-dai-cells = <0>;
+		reg = <0x75>;
+	};
+	codec_oscsel: mp_oscsel@41 {
+		compatible = "mp,codec-oscsel";
+		mp,clkgen = <&codec_mp>;
+		reg = <0x41>;
+	};
+	codec_aes: mp_aes@20 {
+		compatible = "mp,codec-aes";
+		mp,clkgen = <&codec_mp>;
+		reg = <0x20>;
+	};
+	codec_lcd: mp_lcd@76 {
+		compatible = "mp,codec-lcd";
+		mp,clkgen = <&codec_mp>;
+		reg = <0x76>;
+	};
+};
+
+&sai2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai2>;
+	status = "okay";
+};
+
+
+
+/* Disable uart1 since its pins overlap with sai2 pins. */
+// &uart1 {
+// 	status = "disabled";
+// };
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	assigned-clocks = <&clks IMX7D_UART1_ROOT_SRC>;
+	assigned-clock-parents = <&clks IMX7D_OSC_24M_CLK>;
+	// uart-has-rtscts; KILL THIS PROPERTY since we are stealing the pins for I2S
+	fsl,dte-mode;
+};
+
+/* Disable uart2 since its pins overlap with sai2 pins. */
+&uart2 {
+	status = "disabled";
+};
+
+&iomuxc {
+	pinctrl_sai2: sai2-grp {
+		fsl,pins = <
+			MX7D_PAD_SAI2_TX_BCLK__SAI2_TX_BCLK		0x1f
+			MX7D_PAD_SAI2_TX_SYNC__SAI2_TX_SYNC		0x1f
+			MX7D_PAD_SAI2_TX_DATA__SAI2_TX_DATA0	0
+		>;
+	};
+
+	pinctrl_uart1: uart1-grp {
+		fsl,pins = <
+			MX7D_PAD_UART1_TX_DATA__UART1_DTE_RX	0x79
+			MX7D_PAD_UART1_RX_DATA__UART1_DTE_TX	0x79
+		>;
+	};
+};
\ No newline at end of file
diff --git a/arch/arm/configs/colibri_imx7_defconfig b/arch/arm/configs/colibri_imx7_defconfig
new file mode 100644
index 000000000000..7745a933e947
--- /dev/null
+++ b/arch/arm/configs/colibri_imx7_defconfig
@@ -0,0 +1,387 @@
+CONFIG_KERNEL_LZO=y
+CONFIG_SYSVIPC=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_LOG_BUF_SHIFT=18
+CONFIG_CGROUPS=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_DEBUG=y
+CONFIG_NAMESPACES=y
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+# CONFIG_RD_BZIP2 is not set
+# CONFIG_RD_LZMA is not set
+# CONFIG_RD_XZ is not set
+CONFIG_KALLSYMS_ALL=y
+CONFIG_EMBEDDED=y
+# CONFIG_SLUB_DEBUG is not set
+# CONFIG_COMPAT_BRK is not set
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+# CONFIG_BLK_DEV_BSG is not set
+CONFIG_ARCH_MXC=y
+CONFIG_SOC_IMX7D=y
+# CONFIG_ARM_ERRATA_643719 is not set
+CONFIG_SMP=y
+# CONFIG_ARM_CPU_TOPOLOGY is not set
+CONFIG_VMSPLIT_2G=y
+CONFIG_ARM_PSCI=y
+CONFIG_PREEMPT_VOLUNTARY=y
+CONFIG_AEABI=y
+CONFIG_CMA=y
+CONFIG_CMDLINE="noinitrd console=ttymxc0,115200"
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_INTERACTIVE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPUFREQ_DT=y
+CONFIG_CPU_IDLE=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_KERNEL_MODE_NEON=y
+CONFIG_BINFMT_MISC=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_INET=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_NET_IPGRE_DEMUX=m
+# CONFIG_INET_XFRM_MODE_TRANSPORT is not set
+# CONFIG_INET_XFRM_MODE_TUNNEL is not set
+# CONFIG_INET_XFRM_MODE_BEET is not set
+CONFIG_IPV6_SIT=m
+CONFIG_NETFILTER=y
+CONFIG_BRIDGE_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_TABLES=y
+CONFIG_NF_TABLES_INET=y
+CONFIG_NFT_MASQ=y
+CONFIG_NFT_NAT=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_NFACCT=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_NFT_CHAIN_NAT_IPV4=y
+CONFIG_NFT_MASQ_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_NF_TABLES_BRIDGE=y
+CONFIG_L2TP=m
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_VLAN_8021Q=y
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_CAN=m
+CONFIG_CAN_FLEXCAN=m
+CONFIG_CAN_MCP251X=m
+CONFIG_BT=m
+CONFIG_BT_RFCOMM=m
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=m
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=m
+CONFIG_BT_HCIUART=m
+CONFIG_BT_HCIUART_LL=y
+CONFIG_CFG80211=m
+CONFIG_CFG80211_WEXT=y
+CONFIG_MAC80211=m
+CONFIG_RFKILL=y
+CONFIG_RFKILL_INPUT=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+# CONFIG_STANDALONE is not set
+CONFIG_DMA_CMA=y
+CONFIG_CMA_SIZE_MBYTES=256
+CONFIG_CMA_SIZE_PERCENTAGE=50
+CONFIG_CMA_SIZE_SEL_MIN=y
+CONFIG_IMX_WEIM=y
+CONFIG_CONNECTOR=y
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+CONFIG_MTD_JEDECPROBE=y
+CONFIG_MTD_PHYSMAP_OF=y
+CONFIG_MTD_NAND=y
+CONFIG_MTD_NAND_GPMI_NAND=y
+CONFIG_MTD_NAND_MXC=y
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_FASTMAP=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=y
+CONFIG_SCSI=y
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+CONFIG_SCSI_SCAN_ASYNC=y
+# CONFIG_SCSI_LOWLEVEL is not set
+CONFIG_NETDEVICES=y
+# CONFIG_NET_VENDOR_ARC is not set
+# CONFIG_NET_CADENCE is not set
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CIRRUS is not set
+# CONFIG_NET_VENDOR_FARADAY is not set
+# CONFIG_NET_VENDOR_HISILICON is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MICREL is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_QUALCOMM is not set
+# CONFIG_NET_VENDOR_ROCKER is not set
+# CONFIG_NET_VENDOR_SAMSUNG is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SMSC is not set
+# CONFIG_NET_VENDOR_STMICRO is not set
+# CONFIG_NET_VENDOR_VIA is not set
+# CONFIG_NET_VENDOR_WIZNET is not set
+CONFIG_MICREL_PHY=y
+CONFIG_PPP=m
+CONFIG_PPP_DEFLATE=m
+CONFIG_PPP_MPPE=m
+CONFIG_PPTP=m
+CONFIG_PPPOL2TP=m
+CONFIG_PPP_ASYNC=m
+CONFIG_USB_NET_DRIVERS=m
+CONFIG_USB_USBNET=m
+# CONFIG_USB_NET_CDC_NCM is not set
+# CONFIG_USB_NET_NET1080 is not set
+# CONFIG_USB_NET_CDC_SUBSET is not set
+# CONFIG_USB_NET_ZAURUS is not set
+# CONFIG_WLAN is not set
+CONFIG_INPUT_POLLDEV=y
+# CONFIG_INPUT_MOUSEDEV_PSAUX is not set
+CONFIG_INPUT_EVDEV=y
+# CONFIG_KEYBOARD_ATKBD is not set
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_KEYBOARD_IMX=y
+# CONFIG_MOUSE_PS2 is not set
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_AD7879=y
+CONFIG_TOUCHSCREEN_AD7879_I2C=y
+CONFIG_TOUCHSCREEN_ATMEL_MXT=m
+CONFIG_TOUCHSCREEN_FUSION_F0710A=m
+# CONFIG_SERIO is not set
+# CONFIG_LEGACY_PTYS is not set
+# CONFIG_DEVKMEM is not set
+CONFIG_SERIAL_IMX=y
+CONFIG_SERIAL_IMX_CONSOLE=y
+# CONFIG_I2C_COMPAT is not set
+CONFIG_I2C_CHARDEV=y
+# CONFIG_I2C_HELPER_AUTO is not set
+CONFIG_I2C_IMX=y
+CONFIG_SPI=y
+CONFIG_SPI_GPIO=y
+CONFIG_SPI_IMX=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_POWER_RESET=y
+CONFIG_POWER_RESET_GPIO=y
+CONFIG_POWER_RESET_GPIO_RESTART=y
+CONFIG_POWER_RESET_SYSCON_POWEROFF=y
+CONFIG_POWER_SUPPLY=y
+# CONFIG_MXC_MMA8451 is not set
+CONFIG_THERMAL=y
+CONFIG_CPU_THERMAL=y
+CONFIG_IMX_THERMAL=y
+CONFIG_DEVICE_THERMAL=y
+CONFIG_WATCHDOG=y
+CONFIG_RN5T618_WATCHDOG=y
+CONFIG_IMX2_WDT=y
+CONFIG_MFD_RN5T618=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_ANATOP=y
+CONFIG_REGULATOR_RN5T618=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=m
+# CONFIG_USB_GSPCA is not set
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_VIDEO_MXC_PXP_V4L2=y
+CONFIG_SOC_CAMERA=y
+CONFIG_V4L_MEM2MEM_DRIVERS=y
+CONFIG_VIDEO_CODA=y
+CONFIG_SOC_CAMERA_OV2640=y
+CONFIG_FB=y
+# CONFIG_FB_MX3 is not set
+CONFIG_FB_MXS=y
+# CONFIG_FB_MXC_EDID is not set
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+# CONFIG_LCD_CLASS_DEVICE is not set
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+# CONFIG_BACKLIGHT_GENERIC is not set
+CONFIG_BACKLIGHT_PWM=y
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+CONFIG_LOGO=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_USB_AUDIO=m
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_FSL_ASRC=y
+CONFIG_SND_SOC_FSL_SAI=y
+CONFIG_SND_SOC_FSL_SPDIF=y
+CONFIG_SND_SOC_IMX_AUDMUX=y
+CONFIG_SND_IMX_SOC=y
+CONFIG_SND_SOC_SGTL5000=y
+CONFIG_SND_SIMPLE_CARD=y
+CONFIG_HIDRAW=y
+CONFIG_HID_MULTITOUCH=m
+CONFIG_USB_HIDDEV=y
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_MXC=y
+CONFIG_USB_ACM=m
+CONFIG_USB_WDM=m
+CONFIG_USB_STORAGE=y
+CONFIG_USB_CHIPIDEA=y
+CONFIG_USB_CHIPIDEA_UDC=y
+CONFIG_USB_CHIPIDEA_HOST=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_CONSOLE=y
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_FTDI_SIO=y
+CONFIG_USB_SERIAL_PL2303=y
+CONFIG_USB_SERIAL_OPTION=m
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_USB_MXS_PHY=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_CONFIGFS=m
+CONFIG_USB_CONFIGFS_SERIAL=y
+CONFIG_USB_CONFIGFS_ACM=y
+CONFIG_USB_CONFIGFS_OBEX=y
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_USB_CONFIGFS_F_LB_SS=y
+CONFIG_USB_CONFIGFS_F_FS=y
+CONFIG_USB_ZERO=m
+CONFIG_USB_ETH=m
+CONFIG_USB_G_NCM=m
+CONFIG_USB_GADGETFS=m
+CONFIG_USB_MASS_STORAGE=m
+CONFIG_USB_G_SERIAL=m
+CONFIG_MMC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SDHCI_ESDHC_IMX=y
+CONFIG_MXC_SIM=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PWM=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_BACKLIGHT=y
+CONFIG_LEDS_TRIGGER_GPIO=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_DS1307=y
+CONFIG_RTC_DRV_SNVS=y
+CONFIG_DMADEVICES=y
+CONFIG_IMX_SDMA=y
+CONFIG_MXS_DMA=y
+CONFIG_MXC_PXP_V2=y
+CONFIG_MXC_PXP_V3=y
+# CONFIG_IOMMU_SUPPORT is not set
+CONFIG_EXTCON_USB_GPIO=y
+CONFIG_IIO=y
+CONFIG_IMX7D_ADC=y
+CONFIG_VF610_ADC=y
+CONFIG_PWM=y
+CONFIG_PWM_IMX=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_QUOTA=y
+CONFIG_QUOTA_NETLINK_INTERFACE=y
+# CONFIG_PRINT_QUOTA_WARNING is not set
+CONFIG_AUTOFS4_FS=y
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=y
+CONFIG_OVERLAY_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_NTFS_FS=y
+CONFIG_NTFS_RW=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_UBIFS_FS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_ROOT_NFS=y
+CONFIG_CIFS=y
+CONFIG_NLS_DEFAULT="cp437"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_PRINTK_TIME=y
+CONFIG_DEBUG_FS=y
+CONFIG_LOCKUP_DETECTOR=y
+CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=10
+# CONFIG_SCHED_DEBUG is not set
+CONFIG_STACKTRACE=y
+# CONFIG_DEBUG_BUGVERBOSE is not set
+# CONFIG_FTRACE is not set
+CONFIG_DEBUG_USER=y
+CONFIG_CORESIGHT=y
+CONFIG_CORESIGHT_LINK_AND_SINK_TMC=y
+CONFIG_CORESIGHT_SINK_TPIU=y
+CONFIG_CORESIGHT_SINK_ETBV10=y
+CONFIG_CORESIGHT_SOURCE_ETM3X=y
+CONFIG_SECURITYFS=y
+CONFIG_CRYPTO_ECDH=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_TEST=m
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_GCM=y
+CONFIG_CRYPTO_CBC=y
+CONFIG_CRYPTO_CTS=y
+CONFIG_CRYPTO_LRW=y
+CONFIG_CRYPTO_XTS=y
+CONFIG_CRYPTO_MICHAEL_MIC=y
+CONFIG_CRYPTO_RMD128=y
+CONFIG_CRYPTO_RMD160=y
+CONFIG_CRYPTO_RMD256=y
+CONFIG_CRYPTO_RMD320=y
+CONFIG_CRYPTO_SHA1=y
+CONFIG_CRYPTO_SHA512=y
+CONFIG_CRYPTO_TGR192=y
+CONFIG_CRYPTO_WP512=y
+CONFIG_CRYPTO_BLOWFISH=y
+CONFIG_CRYPTO_CAMELLIA=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_DEV_FSL_CAAM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM_TEST=m
+CONFIG_CRC_CCITT=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC_ITU_T=m
+CONFIG_FONTS=y
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
\ No newline at end of file
diff --git a/linux-workspace.code-workspace b/linux-workspace.code-workspace
new file mode 100644
index 000000000000..69a3cf843fce
--- /dev/null
+++ b/linux-workspace.code-workspace
@@ -0,0 +1,13 @@
+{
+	"folders": [
+		{
+			"path": "."
+		}
+	],
+	"settings": {
+		"files.associations": {
+			"audio_codec.h": "c",
+			"i2c.h": "c"
+		}
+	}
+}
\ No newline at end of file
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index efb095dbcd71..eec386bc20d2 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -106,6 +106,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_MAX9877 if I2C
 	select SND_SOC_MC13783 if MFD_MC13XXX
 	select SND_SOC_ML26124 if I2C
+	select SND_SOC_MPCODEC if I2C
 	select SND_SOC_MT6351 if MTK_PMIC_WRAP
 	select SND_SOC_NAU8540 if I2C
 	select SND_SOC_NAU8810 if I2C
@@ -673,6 +674,10 @@ config SND_SOC_MAX9860
 	depends on I2C
 	select REGMAP_I2C
 
+config SND_SOC_MPCODEC
+	tristate "Musica Pristina Codec"
+	depends on I2C
+
 config SND_SOC_MSM8916_WCD_ANALOG
 	tristate "Qualcomm MSM8916 WCD Analog Codec"
 	depends on SPMI || COMPILE_TEST
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 7ae7c85e8219..972f15a7b0a8 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -101,6 +101,7 @@ snd-soc-max9850-objs := max9850.o
 snd-soc-max9860-objs := max9860.o
 snd-soc-mc13783-objs := mc13783.o
 snd-soc-ml26124-objs := ml26124.o
+snd-soc-mp-codec-objs := mp.o
 snd-soc-msm8916-analog-objs := msm8916-wcd-analog.o
 snd-soc-msm8916-digital-objs := msm8916-wcd-digital.o
 snd-soc-mt6351-objs := mt6351.o
@@ -361,6 +362,7 @@ obj-$(CONFIG_SND_SOC_MAX9850)	+= snd-soc-max9850.o
 obj-$(CONFIG_SND_SOC_MAX9860)	+= snd-soc-max9860.o
 obj-$(CONFIG_SND_SOC_MC13783)	+= snd-soc-mc13783.o
 obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o
+obj-$(CONFIG_SND_SOC_MPCODEC)  += snd-soc-mp-codec.o
 obj-$(CONFIG_SND_SOC_MSM8916_WCD_ANALOG) +=snd-soc-msm8916-analog.o
 obj-$(CONFIG_SND_SOC_MSM8916_WCD_DIGITAL) +=snd-soc-msm8916-digital.o
 obj-$(CONFIG_SND_SOC_MT6351)	+= snd-soc-mt6351.o
diff --git a/sound/soc/codecs/mp-i2c.c b/sound/soc/codecs/mp-i2c.c
new file mode 100644
index 000000000000..bf30eb70a816
--- /dev/null
+++ b/sound/soc/codecs/mp-i2c.c
@@ -0,0 +1,58 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * mp ASoC I2C driver
+ *
+ * Copyright (c) Welsh Technologies
+ *
+ *     Kevin Welsh <kwelsh@welshtechnologies.com>
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/i2c.h>
+#include <linux/regmap.h>
+
+#include "mp.h"
+
+static int mp_i2c_probe(struct i2c_client *client,
+			      const struct i2c_device_id *id)
+{
+	struct regmap *regmap;
+	int ret;
+
+	regmap = devm_regmap_init_i2c(client, &mp_regmap_config);
+	if (IS_ERR(regmap)) {
+		ret = PTR_ERR(regmap);
+		dev_err(&client->dev, "Failed to allocate regmap: %d\n", ret);
+		return ret;
+	}
+
+	return mp_common_init(&client->dev, regmap);
+}
+
+static const struct of_device_id mp2019_of_match[] = {
+	{ .compatible = "mp,mp2019", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, mp_of_match);
+
+static const struct i2c_device_id mp2019_i2c_ids[] = {
+	{ "mp", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, mp2019_i2c_ids);
+
+static struct i2c_driver mp2019_clock_i2c_driver = {
+	.driver = {
+		.name	= "mp2019",
+		.of_match_table = of_match_ptr(mp2019_of_match),
+	},
+	.id_table	= mp2019_i2c_ids,
+	.probe		= mp2019_i2c_probe,
+};
+
+module_i2c_driver(mp2019_i2c_driver);
+
+MODULE_DESCRIPTION("ASoC MP I2C driver");
+MODULE_AUTHOR("Kevin Welsh <kwelsh@welshtechnologies.com>");
+MODULE_LICENSE("GPL");
\ No newline at end of file
diff --git a/sound/soc/codecs/mp.c b/sound/soc/codecs/mp.c
new file mode 100644
index 000000000000..0199793f1462
--- /dev/null
+++ b/sound/soc/codecs/mp.c
@@ -0,0 +1,715 @@
+/*
+ * mp.c -- Musica Pristina ALSA SoC codec driver
+ *
+ * Copyright 2019 Welsh Technologies.
+ * 
+ * Author: Kevin Welsh <kwelsh@welshtechnologies.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/regmap.h>
+#include <linux/of_device.h>
+#include <linux/kernel.h>
+#include <linux/regmap.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include "mp.h"
+
+static int ocxo = 1;
+module_param(ocxo, int, 0644);
+MODULE_PARM_DESC(ocxo, "Boolean to enable OCXO (0/1 == DFXO/OCXO)");
+
+static int maxrate = 768;
+module_param(maxrate, int, 0644);
+MODULE_PARM_DESC(maxrate, "Maximum PCM rate");
+
+/* custom function to fetch info of PCM playback volume */
+static int dac_info_volsw(struct snd_kcontrol *kcontrol,
+			  struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 2;
+	uinfo->value.integer.min = 0;
+	uinfo->value.integer.max = 100;
+	return 0;
+}
+
+/*
+ * custom function to get PCM playback volume
+ */
+static int dac_get_volsw(struct snd_kcontrol *kcontrol,
+			 struct snd_ctl_elem_value *ucontrol)
+{
+	int l;
+	int r;
+
+	l = 100;
+	r = 100;
+
+	ucontrol->value.integer.value[0] = l;
+	ucontrol->value.integer.value[1] = r;
+
+	return 0;
+}
+
+/*
+ * custom function to put PCM playback volume
+ */
+static int dac_put_volsw(struct snd_kcontrol *kcontrol,
+			 struct snd_ctl_elem_value *ucontrol)
+{
+	int l;
+	int r;
+
+	l = ucontrol->value.integer.value[0];
+	r = ucontrol->value.integer.value[1];
+
+	return 0;
+}
+
+static int mp2019_dai_trigger(struct snd_pcm_substream *substream, int cmd,
+			  struct snd_soc_dai *dai)
+{
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		dev_dbg(dai->dev, "Starting audio stream\n");
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		dev_dbg(dai->dev, "Stopping audio stream\n");
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static const unsigned int mp2019_rates[] = {
+	44100,  48000,  88200,  96000,  176400,
+	192000, 352800, 384000, 705600, 768000,
+};
+
+static const struct snd_pcm_hw_constraint_list mp2019_rate_constraints = {
+	.count = ARRAY_SIZE(mp2019_rates),
+	.list = mp2019_rates,
+};
+
+
+
+static int mp2019_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	struct snd_soc_component *component = dai->component;
+	struct mp2019_codec_priv *mp = snd_soc_component_get_drvdata(component);
+
+	/* I2S clock and frame master setting. */
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBM_CFM:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* setting I2S data format */
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	mp->fmt = fmt;
+	return 0;
+}
+
+static int mp2019_hw_params(struct snd_pcm_substream *substream,
+			    struct snd_pcm_hw_params *params,
+			    struct snd_soc_dai *dai)
+{
+	int frame_rate, frame_width;
+	struct snd_soc_component *component = dai->component;
+
+	frame_rate = params_rate(params);
+	frame_width = params_width(params);
+	
+	dev_warn(component->dev, "BEGIN mp2019_set_clock");
+
+	switch (frame_rate) {
+	case 44100:
+	case 48000:
+	case 88200:
+	case 96000:
+	case 176400:
+	case 192000:
+	case 352800:
+	case 384000:
+		break;
+	case 705600:
+	case 768000:
+		if (maxrate == 768) {
+			break;
+		} else {
+			dev_err(component->dev, "frame rate %d not supported\n",
+				frame_rate);
+			return -EINVAL;
+		}
+	default:
+		dev_err(component->dev, "frame rate %d not supported\n",
+			frame_rate);
+		return -EINVAL;
+	}
+	switch (frame_width) {
+	case 16:
+	case 24:
+	case 32:
+		break;
+	default:
+		dev_err(component->dev, "%d-bit frame width not supported\n",
+			frame_width);
+		return -EINVAL;
+	}
+	if (ocxo == 1) {
+		/* OCXO crystal strategy */
+		dev_warn(component->dev,
+			 "    CONFIG_SND_SOC_MPCODEC_XTAL_OCXO");
+		return update_playback_OCXO(dai, frame_rate, frame_width);
+	} else {
+		/* Dual Frequency XO crystal strategy */
+		dev_warn(component->dev,
+			 "    CONFIG_SND_SOC_MPCODEC_XTAL_DFXO");
+		return update_playback_DFXO(dai, frame_rate, frame_width);
+	}
+
+	dev_warn(component->dev, "END mp2019_set_clock");
+	return 0;
+}
+
+static int mp2019_codec_startup(struct snd_pcm_substream *substream,
+			    struct snd_soc_dai *dai)
+{
+	int ret;
+
+	ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+					 SNDRV_PCM_HW_PARAM_RATE,
+					 &mp2019_rate_constraints);
+
+	return ret;
+}
+
+
+static const struct regmap_config mp2019_lcd_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 24,
+	.max_register = 0xFFFF,
+	.cache_type = REGCACHE_RBTREE,
+};
+EXPORT_SYMBOL_GPL(mp2019_lcd_regmap_config);
+
+static const struct regmap_config mp2019_aes_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 24,
+	.max_register = 0xFFFF,
+	.cache_type = REGCACHE_RBTREE,
+};
+EXPORT_SYMBOL_GPL(mp2019_aes_regmap_config);
+
+static const struct regmap_config mp2019_clock_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0xFF,
+	.cache_type = REGCACHE_RBTREE,
+};
+EXPORT_SYMBOL_GPL(mp2019_clock_regmap_config);
+
+static const struct regmap_config mp2019_oscsel_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0xFF,
+	.cache_type = REGCACHE_RBTREE,
+};
+EXPORT_SYMBOL_GPL(mp2019_oscsel_regmap_config);
+
+static const struct snd_soc_dai_ops mp2019_dai_ops = {
+	.startup = mp2019_codec_startup,
+	.hw_params = mp2019_hw_params,
+	.set_fmt = mp2019_set_dai_fmt,
+	.trigger = mp2019_dai_trigger,
+};
+
+static const struct snd_kcontrol_new mp2019_controls[] = {
+	{
+		.iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+		.name = "PCM Playback Volume",
+		.access = SNDRV_CTL_ELEM_ACCESS_READWRITE,
+		.info = dac_info_volsw,
+		.get = dac_get_volsw,
+		.put = dac_put_volsw,
+	},
+};
+
+static struct snd_soc_dai_driver mp2019_dai = {
+	.name = "Musica Pristina",
+	.playback =
+		{
+			.stream_name = "Playback",
+			.channels_min = 2,
+			.channels_max = 2,
+			.rates = SNDRV_PCM_RATE_KNOT,
+			.formats = MP2019_FORMATS,
+		},
+	.ops = &mp2019_dai_ops,
+};
+
+
+/*
+int mp2019_common_init(struct device *dev, struct regmap *regmap)
+{
+	struct mp2019_private *mp2019;
+
+	mp2019 = devm_kzalloc(dev, sizeof(struct mp2019_private), GFP_KERNEL);
+	if (!mp2019)
+		return -ENOMEM;
+
+	mp2019->regmap = regmap;
+	dev_set_drvdata(dev, mp2019);
+
+	return devm_snd_soc_register_component(dev, &soc_component_dev_mp2019,
+					       &mp2019_dai, 1);
+}
+EXPORT_SYMBOL_GPL(mp2019_common_init);
+*/
+
+
+
+static int mp2019_codec_probe(struct snd_soc_component *component)
+{
+	return 0;
+}
+
+static void mp2019_codec_remove(struct snd_soc_component *component)
+{
+}
+
+static const struct snd_soc_component_driver soc_component_dev_mp2019 = {
+	.probe = mp2019_codec_probe,
+	.remove = mp2019_codec_remove,
+	.controls = mp2019_controls,
+	.num_controls = ARRAY_SIZE(mp2019_controls),
+	.idle_bias_on = 1,
+	.use_pmdown_time = 1,
+	.endianness = 1,
+	.non_legacy_dai_naming = 1,
+};
+
+
+/* LCD DRIVER */
+
+static int mp2019_lcd_i2c_probe(struct i2c_client *i2c,
+			    const struct i2c_device_id *id)
+{
+	struct device_node *clkgen_np;
+	struct i2c_client *clkgen_client;
+	struct mp2019_codec_priv *mp;
+	int ret;
+
+	dev_warn(&i2c->dev, "BEGIN mp2019_lcd_i2c_probe");
+
+	clkgen_np = of_parse_phandle(i2c->dev.of_node, "mp,clkgen", 0);
+	if (!clkgen_np) {
+		dev_err(&i2c->dev,
+			"Failed to get clock generator phandle\n");
+		return -ENODEV;
+	}
+	clkgen_client = of_find_i2c_device_by_node(clkgen_np);
+	of_node_put(clkgen_np);
+	if (!clkgen_client) {
+		dev_dbg(&i2c->dev, "Clock generator I2C client not found\n");
+		return -EPROBE_DEFER;
+	}
+	mp = i2c_get_clientdata(clkgen_client);
+	put_device(&clkgen_client->dev);
+	mp->lcd_regmap = devm_regmap_init_i2c(i2c, &mp2019_lcd_regmap_config);
+	if (IS_ERR(mp->lcd_regmap)) {
+		ret = PTR_ERR(mp->lcd_regmap);
+		dev_err(&i2c->dev, "Failed to allocate lcd regmap: %d\n",
+			ret);
+		return ret;
+	}
+
+	i2c_set_clientdata(i2c, mp);
+
+	dev_warn(&i2c->dev, "END mp2019_lcd_i2c_probe");
+
+	return 0;
+}
+
+static int mp2019_lcd_i2c_remove(struct i2c_client *i2c)
+{
+	return 0;
+}
+
+static const struct i2c_device_id mp2019_lcd_id[] = {
+	{ "mp2019_lcd", 0 },
+	{ },
+};
+
+MODULE_DEVICE_TABLE(i2c, mp2019_lcd_id);
+
+static const struct of_device_id mp2019_lcd_dt_ids[] = {
+	{
+		.compatible = "mp,codec-lcd",
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, mp2019_lcd_dt_ids);
+
+static struct i2c_driver mp2019_lcd_i2c_driver = {
+	.driver =
+		{
+			.name = "mp2019_lcd",
+			.of_match_table = mp2019_lcd_dt_ids,
+		},
+	.probe = mp2019_lcd_i2c_probe,
+	.remove = mp2019_lcd_i2c_remove,
+	.id_table = mp2019_lcd_id,
+};
+
+/* END LCD DRIVER */
+
+
+/* AES DRIVER */
+
+static int mp2019_aes_i2c_probe(struct i2c_client *i2c,
+			    const struct i2c_device_id *id)
+{
+	struct device_node *clkgen_np;
+	struct i2c_client *clkgen_client;
+	struct mp2019_codec_priv *mp;
+	int ret;
+
+	dev_warn(&i2c->dev, "BEGIN mp2019_aes_i2c_probe");
+
+	clkgen_np = of_parse_phandle(i2c->dev.of_node, "mp,clkgen", 0);
+	if (!clkgen_np) {
+		dev_err(&i2c->dev,
+			"Failed to get clock generator phandle\n");
+		return -ENODEV;
+	}
+	clkgen_client = of_find_i2c_device_by_node(clkgen_np);
+	of_node_put(clkgen_np);
+	if (!clkgen_client) {
+		dev_dbg(&i2c->dev, "Clock generator I2C client not found\n");
+		return -EPROBE_DEFER;
+	}
+	mp = i2c_get_clientdata(clkgen_client);
+	put_device(&clkgen_client->dev);
+	mp->aes_regmap = devm_regmap_init_i2c(i2c, &mp2019_aes_regmap_config);
+	if (IS_ERR(mp->aes_regmap)) {
+		ret = PTR_ERR(mp->aes_regmap);
+		dev_err(&i2c->dev, "Failed to allocate aes regmap: %d\n",
+			ret);
+		return ret;
+	}
+
+	i2c_set_clientdata(i2c, mp);
+
+	dev_warn(&i2c->dev, "END mp2019_aes_i2c_probe");
+
+	return 0;
+}
+
+static int mp2019_aes_i2c_remove(struct i2c_client *i2c)
+{
+	return 0;
+}
+
+static const struct i2c_device_id mp2019_aes_id[] = {
+	{ "mp2019_aes", 0 },
+	{ },
+};
+
+MODULE_DEVICE_TABLE(i2c, mp2019_aes_id);
+
+static const struct of_device_id mp2019_aes_dt_ids[] = {
+	{
+		.compatible = "mp,codec-aes",
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, mp2019_aes_dt_ids);
+
+static struct i2c_driver mp2019_aes_i2c_driver = {
+	.driver =
+		{
+			.name = "mp2019_aes",
+			.of_match_table = mp2019_aes_dt_ids,
+		},
+	.probe = mp2019_aes_i2c_probe,
+	.remove = mp2019_aes_i2c_remove,
+	.id_table = mp2019_aes_id,
+};
+
+/* END AES DRIVER */
+
+/* mp2019 I2C */
+static int mp2019_oscsel_i2c_probe(struct i2c_client *i2c,
+			       const struct i2c_device_id *id)
+{
+	struct device_node *clkgen_np;
+	struct i2c_client *clkgen_client;
+	struct mp2019_codec_priv *mp;
+	int ret;
+	int i;
+
+	dev_warn(&i2c->dev, "BEGIN mp2019_oscsel_i2c_probe");
+
+	clkgen_np = of_parse_phandle(i2c->dev.of_node, "mp,clkgen", 0);
+	if (!clkgen_np) {
+		dev_err(&i2c->dev,
+			"Failed to get clock generator phandle\n");
+		return -ENODEV;
+	}
+	clkgen_client = of_find_i2c_device_by_node(clkgen_np);
+	of_node_put(clkgen_np);
+	if (!clkgen_client) {
+		dev_dbg(&i2c->dev, "Clock generator I2C client not found\n");
+		return -EPROBE_DEFER;
+	}
+	mp = i2c_get_clientdata(clkgen_client);
+	put_device(&clkgen_client->dev);
+	mp->oscsel_regmap = devm_regmap_init_i2c(i2c, &mp2019_oscsel_regmap_config);
+	if (IS_ERR(mp->oscsel_regmap)) {
+		ret = PTR_ERR(mp->oscsel_regmap);
+		dev_err(&i2c->dev,
+			"Failed to allocate oscillator selector regmap: %d\n",
+			ret);
+		return ret;
+	}
+	dev_warn(&i2c->dev, "    BEGIN i2c_set_clientdata(client, mp);");
+	i2c_set_clientdata(i2c, mp);
+	dev_warn(&i2c->dev, "    BEGIN i2c_set_clientdata(client, mp);");
+
+	dev_warn(&i2c->dev, "BEGIN devm_snd_soc_register_component");
+
+	/*
+	if(maxrate == 768) {
+		rate = "768";
+	} else {
+		rate = "384";
+	}
+	strcpy(name, "Musica Pristina ");
+	strcpy(name, rate);
+	strcpy(name, " ");
+	strcpy(name, strategy);
+
+
+	if(ocxo == 1) {
+		strategy = "OCXO";
+	} else {
+		strategy = "DFXO";
+	}
+
+	dev_warn(&client->dev, "    STRATEGY: %s", strategy);
+	snprintf(mp2019_dai.name, sizeof(mp2019_dai.name), "%s %d %s", mp2019_dai.name, maxrate, strategy);
+	dev_warn(&client->dev, "*** and the name is: %s", mp2019_dai.name);
+
+
+	ret = snd_soc_register_codec(&clkgen_client->dev, &mp2019_codec_driver,
+	 			     &mp2019_dai, 1);
+	*/
+
+	dev_warn(&i2c->dev, "    client->dev");
+	dev_warn(&clkgen_client->dev, "    &clkgen_client->dev");
+
+	ret = devm_snd_soc_register_component(&clkgen_client->dev,
+			&soc_component_dev_mp2019, &mp2019_dai, 1);
+	
+
+		dev_warn(&i2c->dev, "END devm_snd_soc_register_component");
+	if (ret)
+		return ret;
+
+	dev_warn(&i2c->dev, "    BEGIN default LCD regs");
+	dev_warn(&i2c->dev, "    END default LCD regs");
+
+	dev_warn(&i2c->dev, "    BEGIN default AES regs");
+	for (i = 0; i < ARRAY_SIZE(mp2019_aes_reg_defaults); i++) {
+		regmap_write(mp->aes_regmap, mp2019_aes_reg_defaults[i].reg,
+			     mp2019_aes_reg_defaults[i].def);
+	}
+	dev_warn(&i2c->dev, "    END default AES regs");
+
+	dev_warn(&i2c->dev, "    BEGIN default OSCSEL regs");
+	for (i = 0; i < ARRAY_SIZE(mp2019_oscsel_reg_defaults); i++) {
+		regmap_write(mp->oscsel_regmap, mp2019_oscsel_reg_defaults[i].reg,
+			     mp2019_oscsel_reg_defaults[i].def);
+	}
+	dev_warn(&i2c->dev, "    END default OSCSEL regs");
+
+	dev_warn(&i2c->dev, "    BEGIN default CLKGEN regs");
+	for (i = 0; i < ARRAY_SIZE(mp2019_codec_reg_defaults); i++) {
+		clkgen_regmap_write(mp->clkgen_regmap,
+				    mp2019_codec_reg_defaults[i].reg,
+				    mp2019_codec_reg_defaults[i].def);
+	}
+	dev_warn(&i2c->dev, "    END default CLKGEN regs");
+
+	dev_warn(&i2c->dev, "END mp2019_oscsel_i2c_probe");
+
+	return 0;
+}
+
+static int mp2019_oscsel_i2c_remove(struct i2c_client *i2c)
+{
+	snd_soc_unregister_component(&i2c->dev);
+	return 0;
+}
+
+static const struct i2c_device_id mp2019_oscsel_id[] = {
+	{ "mp2019_oscsel", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, mp2019_oscsel_id);
+
+static const struct of_device_id mp2019_oscsel_dt_ids[] = {
+	{
+		.compatible = "mp,codec-oscsel",
+	},
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mp2019_oscsel_dt_ids);
+
+static struct i2c_driver mp2019_oscsel_i2c_driver = {
+	.driver =
+		{
+			.name = "mp2019_oscsel",
+			.of_match_table = mp2019_oscsel_dt_ids,
+		},
+	.probe = mp2019_oscsel_i2c_probe,
+	.remove = mp2019_oscsel_i2c_remove,
+	.id_table = mp2019_oscsel_id,
+};
+/* end mp2019_oscel I2C */
+
+
+
+
+
+
+
+
+
+
+
+/* mp2019 I2C */
+static const struct of_device_id mp2019_of_match[] = {
+	{
+		.compatible = "mp,mp-clkgen",
+	},
+	{}
+};
+MODULE_DEVICE_TABLE(of, mp2019_of_match);
+
+static int mp2019_i2c_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct mp2019_codec_priv *mp;
+	int ret;
+
+	dev_warn(&client->dev, "BEGIN mp2019_i2c_probe");
+
+	mp = devm_kzalloc(&client->dev, sizeof(*mp), GFP_KERNEL);
+	if (!mp)
+		return -ENOMEM;
+
+	mp->current_clock = 0;
+	mp->current_regmap = 0;
+
+	dev_warn(&client->dev, "  PRE i2c_set_clientdata");
+	i2c_set_clientdata(client, mp);
+
+	dev_warn(&client->dev, "  PRE devm_regmap_init_i2c");
+	mp->clkgen_regmap = devm_regmap_init_i2c(client, &mp2019_clock_regmap_config);
+	if (IS_ERR(mp->clkgen_regmap)) {
+		ret = PTR_ERR(mp->clkgen_regmap);
+		dev_err(&client->dev, "Failed to allocate regmap: %d\n", ret);
+		return ret;
+	}
+
+	dev_warn(&client->dev, "END mp2019_i2c_probe");
+
+	return 0;
+}
+
+static int mp2019_i2c_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+static const struct i2c_device_id mp2019_codec_id[] = {
+	{ "mp2019", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, mp2019_codec_id);
+
+static struct i2c_driver mp2019_i2c_driver = {
+	.driver =
+		{
+			.name = "mp_clkgen",
+			.of_match_table = mp2019_of_match,
+		},
+	.probe = mp2019_i2c_probe,
+	.remove = mp2019_i2c_remove,
+	.id_table = mp2019_codec_id,
+};
+
+static int __init mp2019_codec_init(void)
+{
+	int ret;
+
+	ret = i2c_add_driver(&mp2019_i2c_driver);
+	if (ret) {
+		return ret;
+	}
+	ret = i2c_add_driver(&mp2019_oscsel_i2c_driver);
+	if (ret) {
+		i2c_del_driver(&mp2019_i2c_driver);
+	}
+	ret = i2c_add_driver(&mp2019_aes_i2c_driver);
+	if (ret) {
+		i2c_del_driver(&mp2019_oscsel_i2c_driver);
+		i2c_del_driver(&mp2019_i2c_driver);
+	}
+	ret = i2c_add_driver(&mp2019_lcd_i2c_driver);
+	if (ret) {
+		i2c_del_driver(&mp2019_aes_i2c_driver);
+		i2c_del_driver(&mp2019_oscsel_i2c_driver);
+		i2c_del_driver(&mp2019_i2c_driver);
+	}
+	return ret;
+}
+module_init(mp2019_codec_init);
+
+static void __exit mp2019_codec_exit(void)
+{
+	i2c_del_driver(&mp2019_lcd_i2c_driver);
+	i2c_del_driver(&mp2019_aes_i2c_driver);
+	i2c_del_driver(&mp2019_oscsel_i2c_driver);
+	i2c_del_driver(&mp2019_i2c_driver);
+}
+module_exit(mp2019_codec_exit);
+
+MODULE_DESCRIPTION("ASoC MP2019 Musica Pristina driver");
+MODULE_AUTHOR("Kevin Welsh <kwelsh@welshtechnologies.com>");
+MODULE_LICENSE("GPL");
\ No newline at end of file
diff --git a/sound/soc/codecs/mp.h b/sound/soc/codecs/mp.h
new file mode 100644
index 000000000000..1bc685a95626
--- /dev/null
+++ b/sound/soc/codecs/mp.h
@@ -0,0 +1,437 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * definitions for MP2019
+ *
+ * Copyright 2019 Welsh Technologies
+ */
+
+#ifndef __MP2019_H__
+#define __MP2019_H__
+
+#define MP2019_FORMATS (SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S32_LE)
+/*
+	remove 16 to force 24 / 32 bit conversion ** SNDRV_PCM_FMTBIT_S16_LE | \
+*/
+
+
+#define MP2019_RATES (SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000 |   \
+						SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000 |   \
+						SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000 | \
+						SNDRV_PCM_RATE_352000 | SNDRV_PCM_RATE_384000 | \
+						SNDRV_PCM_RATE_705600 | SNDRV_PCM_RATE_768000)
+
+extern const struct regmap_config mp2019_regmap_config;
+
+int mp2019_common_init(struct device *dev, struct regmap *regmap);
+
+#endif
+
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <linux/i2c.h>
+#include <sound/soc.h>
+#include "mp_clkgen.h"
+
+static inline int update_playback_OCXO(struct snd_soc_dai *dai, int frame_rate,
+									   int frame_width)
+{
+	int nextFamily;
+	struct snd_soc_component *component = dai->component;
+	struct mp2019_codec_priv *mp = snd_soc_component_get_drvdata(component);
+
+	pr_warn("update_playback_OCXO %d %d", frame_rate, frame_width);
+	regmap_write(mp->lcd_regmap, 0x01, frame_rate);
+	regmap_write(mp->lcd_regmap, 0x02, frame_width);
+
+	switch (frame_rate)
+	{
+	case 44100:
+		nextFamily = 48;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_03(mp);
+			break;
+		case 24:
+			clkgen_regmap_02(mp);
+			break;
+		case 32:
+			clkgen_regmap_01(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 48000:
+		nextFamily = 48;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_06(mp);
+			break;
+		case 24:
+			clkgen_regmap_05(mp);
+			break;
+		case 32:
+			clkgen_regmap_04(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 88200:
+		nextFamily = 96;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_09(mp);
+			break;
+		case 24:
+			clkgen_regmap_08(mp);
+			break;
+		case 32:
+			clkgen_regmap_07(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 96000:
+		nextFamily = 96;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_12(mp);
+			break;
+		case 24:
+			clkgen_regmap_11(mp);
+			break;
+		case 32:
+			clkgen_regmap_10(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 176400:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_15(mp);
+			break;
+		case 24:
+			clkgen_regmap_14(mp);
+			break;
+		case 32:
+			clkgen_regmap_13(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 192000:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_18(mp);
+			break;
+		case 24:
+			clkgen_regmap_17(mp);
+			break;
+		case 32:
+			clkgen_regmap_16(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 352800:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_21(mp);
+			break;
+		case 24:
+			clkgen_regmap_20(mp);
+			break;
+		case 32:
+			clkgen_regmap_19(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 384000:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_24(mp);
+			break;
+		case 24:
+			clkgen_regmap_23(mp);
+			break;
+		case 32:
+			clkgen_regmap_22(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 705600:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_27(mp);
+			break;
+		case 24:
+			clkgen_regmap_26(mp);
+			break;
+		case 32:
+			clkgen_regmap_25(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 768000:
+		nextFamily = 192;
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_30(mp);
+			break;
+		case 24:
+			clkgen_regmap_29(mp);
+			break;
+		case 32:
+			clkgen_regmap_28(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	default:
+		dev_err(component->dev, "frame rate %d not supported\n",
+				frame_rate);
+		return -EINVAL;
+	}
+
+	if(nextFamily != mp->family) {
+
+		regmap_write(mp->aes_regmap, 0x03, 0x83);
+		switch (nextFamily)
+		{
+		case 48:
+			regmap_write(mp->aes_regmap, 0x03, 0x37);
+			break;
+		case 96:
+			regmap_write(mp->aes_regmap, 0x03, 0x17);
+			break;
+		case 192:
+			regmap_write(mp->aes_regmap, 0x03, 0x07);
+			break;
+		}
+		mp->family = nextFamily;	
+	}
+	return 0;
+}
+
+static inline int update_playback_DFXO(struct snd_soc_dai *dai, int frame_rate,
+									   int frame_width)
+{
+	struct snd_soc_component *component = dai->component;
+	struct mp2019_codec_priv *mp = snd_soc_component_get_drvdata(component);
+	switch (frame_rate)
+	{
+	case 44100:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_33(mp);
+			break;
+		case 24:
+			clkgen_regmap_32(mp);
+			break;
+		case 32:
+			clkgen_regmap_31(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 48000:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_48(mp);
+			break;
+		case 24:
+			clkgen_regmap_47(mp);
+			break;
+		case 32:
+			clkgen_regmap_46(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 88200:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_36(mp);
+			break;
+		case 24:
+			clkgen_regmap_35(mp);
+			break;
+		case 32:
+			clkgen_regmap_34(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 96000:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_51(mp);
+			break;
+		case 24:
+			clkgen_regmap_50(mp);
+			break;
+		case 32:
+			clkgen_regmap_49(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 176400:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_39(mp);
+			break;
+		case 24:
+			clkgen_regmap_38(mp);
+			break;
+		case 32:
+			clkgen_regmap_37(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 192000:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_54(mp);
+			break;
+		case 24:
+			clkgen_regmap_53(mp);
+			break;
+		case 32:
+			clkgen_regmap_52(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 352800:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_42(mp);
+			break;
+		case 24:
+			clkgen_regmap_41(mp);
+			break;
+		case 32:
+			clkgen_regmap_40(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 384000:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_57(mp);
+			break;
+		case 24:
+			clkgen_regmap_56(mp);
+			break;
+		case 32:
+			clkgen_regmap_55(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 705600:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_45(mp);
+			break;
+		case 24:
+			clkgen_regmap_44(mp);
+			break;
+		case 32:
+			clkgen_regmap_43(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	case 768000:
+		switch (frame_width)
+		{
+		case 16:
+			clkgen_regmap_60(mp);
+			break;
+		case 24:
+			clkgen_regmap_59(mp);
+			break;
+		case 32:
+			clkgen_regmap_58(mp);
+			break;
+		default:
+			dev_err(component->dev, "%-d-bit frame width not supported\n", frame_width);
+			return -EINVAL;
+		}
+		break;
+	default:
+		dev_err(component->dev, "frame rate %d not supported\n",
+				frame_rate);
+		return -EINVAL;
+	}
+	return 0;
+}
diff --git a/sound/soc/codecs/mp_clkgen.h b/sound/soc/codecs/mp_clkgen.h
new file mode 100644
index 000000000000..3d3afadee3a3
--- /dev/null
+++ b/sound/soc/codecs/mp_clkgen.h
@@ -0,0 +1,4223 @@
+/*
+ * mp_clkgen.h - Musica Pristina ALSA SoC codec driver clock configuration
+ *
+ * Copyright 2018 Welsh Technologies.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <sound/soc.h>
+
+struct mp2019_codec_priv {
+	int fmt;
+	int current_clock;
+	int current_regmap;
+    int family; /* 0 = 44.1, 1 = 48 */
+	struct regmap *clkgen_regmap;
+	struct regmap *oscsel_regmap;
+    struct regmap *aes_regmap;
+	struct regmap *lcd_regmap;
+};
+
+
+
+static inline void enable_DFXO_451584(struct mp2019_codec_priv *mp)
+{
+	
+	if(mp->current_clock != 3) {
+		mp->current_clock = 3;
+		regmap_write(mp->oscsel_regmap, 0x01, 0xf9);
+	}
+}
+
+static inline void enable_DFXO_49152(struct mp2019_codec_priv *mp)
+{
+	
+	if(mp->current_clock != 2) {
+		mp->current_clock = 2;
+		regmap_write(mp->oscsel_regmap, 0x01, 0xfa);
+	}
+}
+
+static inline void enable_OCXO(struct mp2019_codec_priv *mp)
+{
+	
+    int clock;
+    clock = mp->current_clock;
+    pr_warn("BEGIN enable_OCXO");
+    pr_warn("  mp->current_clock: %d", clock);
+	if(clock != 1) {
+        pr_warn("    if(mp->current_clock != 1) {");
+		mp->current_clock = 1;
+        pr_warn("        mp->current_clock = 1;");
+		regmap_write(mp->oscsel_regmap, 0x01, 0xfc);
+        pr_warn("            regmap_write(mp->oscsel_regmap, 0x01, 0xfc);");
+	}
+    pr_warn("END enable_OCXO");
+}
+
+static inline void clkgen_regmap_write(struct regmap *regmap, unsigned int reg, unsigned int def) 
+{
+    unsigned int regPageVal;
+	unsigned int regAddr;
+	unsigned int mask;
+
+    regPageVal = reg >> 8;
+	regmap_write(regmap, 0x01,
+			regPageVal);
+		
+	mask = 0x00ff;
+	regAddr = reg & mask;
+		
+	regmap_write(regmap, regAddr,
+				def);
+
+    if(reg == 0x0B4E) {
+        msleep(300);
+        pr_warn("*** SLEEP");    
+    }
+
+    pr_warn("*** regPageVal: %d regAddr: %d def: %d", regPageVal, regAddr, def);
+}
+
+/* default value of I2C registers for AES */
+static const struct reg_default mp2019_aes_reg_defaults[] = {
+		{ 0x06,		0xff },
+        { 0x07,		0x7f },
+        { 0x02,     0x49 },
+};
+
+/* default value of I2C registers for OSCSEL */
+static const struct reg_default mp2019_oscsel_reg_defaults[] = {
+		{ 0x03,		0xf0 },
+        { 0x01,		0xfc },
+};
+
+/* default value of I2C registers for CLKGEN */
+static const struct reg_default mp2019_codec_reg_defaults[] = {
+   /* Start configuration preamble */
+	{ 0x0B24, 0xC0 },
+	{ 0x0B25, 0x00 },
+	/* Rev D stuck divider fix */
+	{ 0x0502, 0x01 },
+	{ 0x0505, 0x03 },
+	{ 0x0957, 0x17 },
+	{ 0x0B4E, 0x1A },
+	/* End configuration preamble */
+
+	/* Delay 300 msec */
+	/*    Delay is worst case time for device to complete any calibration */
+	/*    that is running due to device state change previous to this script */
+	/*    being processed. */
+
+	/* Start configuration registers */
+	{ 0x0006, 0x00 },
+	{ 0x0007, 0x00 },
+	{ 0x0008, 0x00 },
+	{ 0x000B, 0x74 },
+	{ 0x0017, 0xD0 },
+	{ 0x0018, 0xFF },
+	{ 0x0021, 0x0F },
+	{ 0x0022, 0x00 },
+	{ 0x002B, 0x02 },
+	{ 0x002C, 0x20 },
+	{ 0x002D, 0x00 },
+	{ 0x002E, 0x00 },
+	{ 0x002F, 0x00 },
+	{ 0x0030, 0x00 },
+	{ 0x0031, 0x00 },
+	{ 0x0032, 0x00 },
+	{ 0x0033, 0x00 },
+	{ 0x0034, 0x00 },
+	{ 0x0035, 0x00 },
+	{ 0x0036, 0x00 },
+	{ 0x0037, 0x00 },
+	{ 0x0038, 0x00 },
+	{ 0x0039, 0x00 },
+	{ 0x003A, 0x00 },
+	{ 0x003B, 0x00 },
+	{ 0x003C, 0x00 },
+	{ 0x003D, 0x00 },
+	{ 0x0041, 0x00 },
+	{ 0x0042, 0x00 },
+	{ 0x0043, 0x00 },
+	{ 0x0044, 0x00 },
+	{ 0x009E, 0x00 },
+	{ 0x0102, 0x01 },
+	{ 0x0112, 0x02 },
+	{ 0x0113, 0x09 },
+	{ 0x0114, 0x33 },
+	{ 0x0115, 0x08 },
+	{ 0x0117, 0x02 },
+	{ 0x0118, 0x09 },
+	{ 0x0119, 0x6B },
+	{ 0x011A, 0x08 },
+	{ 0x0126, 0x02 },
+	{ 0x0127, 0x09 },
+	{ 0x0128, 0x33 },
+	{ 0x0129, 0x08 },
+	{ 0x012B, 0x02 },
+	{ 0x012C, 0xCC },
+	{ 0x012D, 0x00 },
+	{ 0x012E, 0x08 },
+	{ 0x013F, 0x00 },
+	{ 0x0140, 0x00 },
+	{ 0x0141, 0x40 },
+	{ 0x0206, 0x00 },
+	{ 0x0208, 0x00 },
+	{ 0x0209, 0x00 },
+	{ 0x020A, 0x00 },
+	{ 0x020B, 0x00 },
+	{ 0x020C, 0x00 },
+	{ 0x020D, 0x00 },
+	{ 0x020E, 0x00 },
+	{ 0x020F, 0x00 },
+	{ 0x0210, 0x00 },
+	{ 0x0211, 0x00 },
+	{ 0x0212, 0x00 },
+	{ 0x0213, 0x00 },
+	{ 0x0214, 0x00 },
+	{ 0x0215, 0x00 },
+	{ 0x0216, 0x00 },
+	{ 0x0217, 0x00 },
+	{ 0x0218, 0x00 },
+	{ 0x0219, 0x00 },
+	{ 0x021A, 0x00 },
+	{ 0x021B, 0x00 },
+	{ 0x021C, 0x00 },
+	{ 0x021D, 0x00 },
+	{ 0x021E, 0x00 },
+	{ 0x021F, 0x00 },
+	{ 0x0220, 0x00 },
+	{ 0x0221, 0x00 },
+	{ 0x0222, 0x00 },
+	{ 0x0223, 0x00 },
+	{ 0x0224, 0x00 },
+	{ 0x0225, 0x00 },
+	{ 0x0226, 0x00 },
+	{ 0x0227, 0x00 },
+	{ 0x0228, 0x00 },
+	{ 0x0229, 0x00 },
+	{ 0x022A, 0x00 },
+	{ 0x022B, 0x00 },
+	{ 0x022C, 0x00 },
+	{ 0x022D, 0x00 },
+	{ 0x022E, 0x00 },
+	{ 0x022F, 0x00 },
+	{ 0x0235, 0x00 },
+	{ 0x0236, 0x00 },
+	{ 0x0237, 0x00 },
+	{ 0x0238, 0x80 },
+	{ 0x0239, 0x95 },
+	{ 0x023A, 0x02 },
+	{ 0x023B, 0x00 },
+	{ 0x023C, 0x00 },
+	{ 0x023D, 0x00 },
+	{ 0x023E, 0xFA },
+	{ 0x0250, 0x0B },
+	{ 0x0251, 0x00 },
+	{ 0x0252, 0x00 },
+	{ 0x0253, 0xFF },
+	{ 0x0254, 0x17 },
+	{ 0x0255, 0x00 },
+	{ 0x025C, 0x7F },
+	{ 0x025D, 0x00 },
+	{ 0x025E, 0x00 },
+	{ 0x025F, 0x97 },
+	{ 0x0260, 0x09 },
+	{ 0x0261, 0x04 },
+	{ 0x026B, 0x4D },
+	{ 0x026C, 0x50 },
+	{ 0x026D, 0x5F },
+	{ 0x026E, 0x30 },
+	{ 0x026F, 0x30 },
+	{ 0x0270, 0x30 },
+	{ 0x0271, 0x30 },
+	{ 0x0272, 0x31 },
+	{ 0x0302, 0x00 },
+	{ 0x0303, 0x00 },
+	{ 0x0304, 0x00 },
+	{ 0x0305, 0x80 },
+	{ 0x0306, 0x0C },
+	{ 0x0307, 0x00 },
+	{ 0x0308, 0x00 },
+	{ 0x0309, 0x00 },
+	{ 0x030A, 0x00 },
+	{ 0x030B, 0x80 },
+	{ 0x030C, 0x00 },
+	{ 0x030D, 0x00 },
+	{ 0x030E, 0x00 },
+	{ 0x030F, 0x00 },
+	{ 0x0310, 0x00 },
+	{ 0x0311, 0x00 },
+	{ 0x0312, 0x00 },
+	{ 0x0313, 0x00 },
+	{ 0x0314, 0x00 },
+	{ 0x0315, 0x00 },
+	{ 0x0316, 0x00 },
+	{ 0x0317, 0x00 },
+	{ 0x0318, 0x00 },
+	{ 0x0319, 0x00 },
+	{ 0x031A, 0x00 },
+	{ 0x031B, 0x00 },
+	{ 0x031C, 0x00 },
+	{ 0x031D, 0x00 },
+	{ 0x031E, 0x00 },
+	{ 0x031F, 0x00 },
+	{ 0x0320, 0x00 },
+	{ 0x0321, 0x00 },
+	{ 0x0322, 0x00 },
+	{ 0x0323, 0x00 },
+	{ 0x0324, 0x00 },
+	{ 0x0325, 0x00 },
+	{ 0x0326, 0x00 },
+	{ 0x0327, 0x00 },
+	{ 0x0328, 0x00 },
+	{ 0x0329, 0x00 },
+	{ 0x032A, 0x00 },
+	{ 0x032B, 0x00 },
+	{ 0x032C, 0x00 },
+	{ 0x032D, 0x00 },
+	{ 0x0338, 0x00 },
+	{ 0x0339, 0x1F },
+	{ 0x033B, 0x00 },
+	{ 0x033C, 0x00 },
+	{ 0x033D, 0x00 },
+	{ 0x033E, 0x00 },
+	{ 0x033F, 0x00 },
+	{ 0x0340, 0x00 },
+	{ 0x0341, 0x00 },
+	{ 0x0342, 0x00 },
+	{ 0x0343, 0x00 },
+	{ 0x0344, 0x00 },
+	{ 0x0345, 0x00 },
+	{ 0x0346, 0x00 },
+	{ 0x0347, 0x00 },
+	{ 0x0348, 0x00 },
+	{ 0x0349, 0x00 },
+	{ 0x034A, 0x00 },
+	{ 0x034B, 0x00 },
+	{ 0x034C, 0x00 },
+	{ 0x034D, 0x00 },
+	{ 0x034E, 0x00 },
+	{ 0x034F, 0x00 },
+	{ 0x0350, 0x00 },
+	{ 0x0351, 0x00 },
+	{ 0x0352, 0x00 },
+	{ 0x0359, 0x00 },
+	{ 0x035A, 0x00 },
+	{ 0x035B, 0x00 },
+	{ 0x035C, 0x00 },
+	{ 0x035D, 0x00 },
+	{ 0x035E, 0x00 },
+	{ 0x035F, 0x00 },
+	{ 0x0360, 0x00 },
+	{ 0x0802, 0x00 },
+	{ 0x0803, 0x00 },
+	{ 0x0804, 0x00 },
+	{ 0x0805, 0x00 },
+	{ 0x0806, 0x00 },
+	{ 0x0807, 0x00 },
+	{ 0x0808, 0x00 },
+	{ 0x0809, 0x00 },
+	{ 0x080A, 0x00 },
+	{ 0x080B, 0x00 },
+	{ 0x080C, 0x00 },
+	{ 0x080D, 0x00 },
+	{ 0x080E, 0x00 },
+	{ 0x080F, 0x00 },
+	{ 0x0810, 0x00 },
+	{ 0x0811, 0x00 },
+	{ 0x0812, 0x00 },
+	{ 0x0813, 0x00 },
+	{ 0x0814, 0x00 },
+	{ 0x0815, 0x00 },
+	{ 0x0816, 0x00 },
+	{ 0x0817, 0x00 },
+	{ 0x0818, 0x00 },
+	{ 0x0819, 0x00 },
+	{ 0x081A, 0x00 },
+	{ 0x081B, 0x00 },
+	{ 0x081C, 0x00 },
+	{ 0x081D, 0x00 },
+	{ 0x081E, 0x00 },
+	{ 0x081F, 0x00 },
+	{ 0x0820, 0x00 },
+	{ 0x0821, 0x00 },
+	{ 0x0822, 0x00 },
+	{ 0x0823, 0x00 },
+	{ 0x0824, 0x00 },
+	{ 0x0825, 0x00 },
+	{ 0x0826, 0x00 },
+	{ 0x0827, 0x00 },
+	{ 0x0828, 0x00 },
+	{ 0x0829, 0x00 },
+	{ 0x082A, 0x00 },
+	{ 0x082B, 0x00 },
+	{ 0x082C, 0x00 },
+	{ 0x082D, 0x00 },
+	{ 0x082E, 0x00 },
+	{ 0x082F, 0x00 },
+	{ 0x0830, 0x00 },
+	{ 0x0831, 0x00 },
+	{ 0x0832, 0x00 },
+	{ 0x0833, 0x00 },
+	{ 0x0834, 0x00 },
+	{ 0x0835, 0x00 },
+	{ 0x0836, 0x00 },
+	{ 0x0837, 0x00 },
+	{ 0x0838, 0x00 },
+	{ 0x0839, 0x00 },
+	{ 0x083A, 0x00 },
+	{ 0x083B, 0x00 },
+	{ 0x083C, 0x00 },
+	{ 0x083D, 0x00 },
+	{ 0x083E, 0x00 },
+	{ 0x083F, 0x00 },
+	{ 0x0840, 0x00 },
+	{ 0x0841, 0x00 },
+	{ 0x0842, 0x00 },
+	{ 0x0843, 0x00 },
+	{ 0x0844, 0x00 },
+	{ 0x0845, 0x00 },
+	{ 0x0846, 0x00 },
+	{ 0x0847, 0x00 },
+	{ 0x0848, 0x00 },
+	{ 0x0849, 0x00 },
+	{ 0x084A, 0x00 },
+	{ 0x084B, 0x00 },
+	{ 0x084C, 0x00 },
+	{ 0x084D, 0x00 },
+	{ 0x084E, 0x00 },
+	{ 0x084F, 0x00 },
+	{ 0x0850, 0x00 },
+	{ 0x0851, 0x00 },
+	{ 0x0852, 0x00 },
+	{ 0x0853, 0x00 },
+	{ 0x0854, 0x00 },
+	{ 0x0855, 0x00 },
+	{ 0x0856, 0x00 },
+	{ 0x0857, 0x00 },
+	{ 0x0858, 0x00 },
+	{ 0x0859, 0x00 },
+	{ 0x085A, 0x00 },
+	{ 0x085B, 0x00 },
+	{ 0x085C, 0x00 },
+	{ 0x085D, 0x00 },
+	{ 0x085E, 0x00 },
+	{ 0x085F, 0x00 },
+	{ 0x0860, 0x00 },
+	{ 0x0861, 0x00 },
+	{ 0x090E, 0x03 },
+	{ 0x091C, 0x04 },
+	{ 0x0943, 0x00 },
+	{ 0x0949, 0x00 },
+	{ 0x094A, 0x00 },
+	{ 0x094E, 0x49 },
+	{ 0x094F, 0x02 },
+	{ 0x095E, 0x00 },
+	{ 0x0A02, 0x00 },
+	{ 0x0A03, 0x01 },
+	{ 0x0A04, 0x01 },
+	{ 0x0A05, 0x01 },
+	{ 0x0A14, 0x00 },
+	{ 0x0A1A, 0x00 },
+	{ 0x0A20, 0x00 },
+	{ 0x0A26, 0x00 },
+	{ 0x0B44, 0x0F },
+	{ 0x0B4A, 0x0E },
+	{ 0x0B57, 0x88 },
+	{ 0x0B58, 0x02 },
+	/* End configuration registers */
+
+	/* Start configuration postamble */
+	{ 0x001C, 0x01 },
+	{ 0x0B24, 0xC3 },
+	{ 0x0B25, 0x02 },
+	/* End configuration postamble */
+};
+
+static inline void clkgen_regmap_01(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 1)
+    {
+        mp->current_regmap = 1;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x13);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x4F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_02(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 2)
+    {
+        mp->current_regmap = 2;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_03(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 3)
+    {
+        mp->current_regmap = 3;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x13);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x9F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_04(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 4)
+    {
+        mp->current_regmap = 4;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_05(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 5)
+    {
+        mp->current_regmap = 5;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0xB0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x2F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xC9);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_06(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 6)
+    {
+        mp->current_regmap = 6;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_07(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 7)
+    {
+        mp->current_regmap = 7;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x27);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_08(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 8)
+    {
+        mp->current_regmap = 8;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_09(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 9)
+    {
+        mp->current_regmap = 9;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x4F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_10(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 10)
+    {
+        mp->current_regmap = 10;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_11(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 11)
+    {
+        mp->current_regmap = 11;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0xB0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xC9);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_12(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 12)
+    {
+        mp->current_regmap = 12;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_13(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 13)
+    {
+        mp->current_regmap = 13;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x13);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_14(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 14)
+    {
+        mp->current_regmap = 14;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_15(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 15)
+    {
+        mp->current_regmap = 15;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x27);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_16(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 16)
+    {
+        mp->current_regmap = 16;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_17(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 17)
+    {
+        mp->current_regmap = 17;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0xB0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xC9);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_18(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 18)
+    {
+        mp->current_regmap = 18;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_19(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 19)
+    {
+        mp->current_regmap = 19;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_20(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 20)
+    {
+        mp->current_regmap = 20;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_21(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 21)
+    {
+        mp->current_regmap = 21;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x13);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_22(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 22)
+    {
+        mp->current_regmap = 22;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_23(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 23)
+    {
+        mp->current_regmap = 23;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0xB0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xC9);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_24(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 24)
+    {
+        mp->current_regmap = 24;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_25(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 25)
+    {
+        mp->current_regmap = 25;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_26(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 26)
+    {
+        mp->current_regmap = 26;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_27(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 27)
+    {
+        mp->current_regmap = 27;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x95);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x53);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x5D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_28(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 28)
+    {
+        mp->current_regmap = 28;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x9E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x64);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_29(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 29)
+    {
+        mp->current_regmap = 29;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0xB0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x40);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x9C);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xC9);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_30(struct mp2019_codec_priv *mp)
+{
+    enable_OCXO(mp);
+
+    if(mp->current_regmap != 30)
+    {
+        mp->current_regmap = 30;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0xFA);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x88);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_31(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 31)
+    {
+        mp->current_regmap = 31;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_32(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 32)
+    {
+        mp->current_regmap = 32;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_33(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 33)
+    {
+        mp->current_regmap = 33;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_34(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 34)
+    {
+        mp->current_regmap = 34;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_35(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 35)
+    {
+        mp->current_regmap = 35;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_36(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 36)
+    {
+        mp->current_regmap = 36;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_37(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 37)
+    {
+        mp->current_regmap = 37;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_38(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 38)
+    {
+        mp->current_regmap = 38;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_39(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 39)
+    {
+        mp->current_regmap = 39;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_40(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 40)
+    {
+        mp->current_regmap = 40;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_41(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 41)
+    {
+        mp->current_regmap = 41;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xBF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_42(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 42)
+    {
+        mp->current_regmap = 42;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_43(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 43)
+    {
+        mp->current_regmap = 43;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xB1);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x49);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_44(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 44)
+    {
+        mp->current_regmap = 44;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x93);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x5F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_45(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_451584(mp);
+
+    if(mp->current_regmap != 45)
+    {
+        mp->current_regmap = 45;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFE);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x09);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x31);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x97);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x58);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x92);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x10);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x1E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_46(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 46)
+    {
+        mp->current_regmap = 46;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_47(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 47)
+    {
+        mp->current_regmap = 47;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_48(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 48)
+    {
+        mp->current_regmap = 48;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_49(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 49)
+    {
+        mp->current_regmap = 49;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_50(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 50)
+    {
+        mp->current_regmap = 50;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x0F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_51(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 51)
+    {
+        mp->current_regmap = 51;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_52(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 52)
+    {
+        mp->current_regmap = 52;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_53(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 53)
+    {
+        mp->current_regmap = 53;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_54(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 54)
+    {
+        mp->current_regmap = 54;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_55(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 55)
+    {
+        mp->current_regmap = 55;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_56(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 56)
+    {
+        mp->current_regmap = 56;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0xBF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_57(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 57)
+    {
+        mp->current_regmap = 57;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_58(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 58)
+    {
+        mp->current_regmap = 58;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x3F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0xFF);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x76);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x43);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_59(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 59)
+    {
+        mp->current_regmap = 59;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x87);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x5F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x2D);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
+static inline void clkgen_regmap_60(struct mp2019_codec_priv *mp)
+{
+    enable_DFXO_49152(mp);
+
+    if(mp->current_regmap != 60)
+    {
+        mp->current_regmap = 60;
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC0);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0502, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0505, 0x03);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0957, 0x17);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4E, 0x1A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0018, 0xFD);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0021, 0x0B);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002C, 0x32);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002D, 0x04);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x002E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0030, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0036, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0038, 0x8A);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0041, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0042, 0x05);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0112, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x011A, 0x08);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0126, 0x06);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0208, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x020E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0212, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0218, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0238, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0239, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023A, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023D, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x023E, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0250, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0253, 0x1F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0254, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025C, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x025F, 0x7F);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0260, 0xBB);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0261, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0305, 0x80);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0306, 0x86);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0310, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0311, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0312, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0316, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x090E, 0x00);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0949, 0x02);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x094A, 0x20);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A03, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0A05, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B4A, 0x0E);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B57, 0x07);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B58, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x001C, 0x01);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B24, 0xC3);
+        clkgen_regmap_write(mp->clkgen_regmap, 0x0B25, 0x02);
+    }
+}
+
+
